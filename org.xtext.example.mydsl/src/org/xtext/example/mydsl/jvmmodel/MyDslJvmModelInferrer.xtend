/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.jvmmodel

import com.google.inject.Inject
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.xtext.example.mydsl.myDsl.Element
import org.xtext.example.mydsl.myDsl.Collection

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class MyDslJvmModelInferrer extends AbstractModelInferrer {

	@Inject extension JvmTypesBuilder
	
	def dispatch void infer(Element element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		acceptor.accept(element.toClass(element.name))[
//			it.superTypes += element.typeRef.type.typeRef()
			it.superTypes += element.typeRef.cloneWithProxies
		]
	}
	def dispatch void infer(Collection collection, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		acceptor.accept(collection.toClass(collection.name))[
//			it.superTypes += "java.util.Collection".typeRef(
//				collection.elementRef.typeRef.type.typeRef
//			)
			it.superTypes += "java.util.Collection".typeRef(
				collection.elementRef.typeRef.cloneWithProxies
			)
			it.members += collection.toField("foo", collection.elementRef.typeRef.cloneWithProxies)
			it.members += collection.toField("foos", "java.util.Collection".typeRef(
				collection.elementRef.typeRef.cloneWithProxies
			))
		]
	}
}
